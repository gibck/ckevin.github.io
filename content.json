[{"title":"JAVA8新特性","date":"2018-07-06T08:34:50.000Z","path":"2018/07/06/JAVA8新特性/","text":"Java8 Jdk新特性 stream 由值创建流 可以使用Stream的静态方法Stream.of显示的创建一个流。它可以接收任意数量的参数。 //创建字符串流 Stream&lt;String&gt; stream = Stream.of(&quot;hexo&quot;,&quot;java8&quot;,&quot;lambdas&quot;,&quot;stream&quot;); //把所有字母转成大写，打印出来 stream.map(String::toUpperCase).forEach(System.out::println); 由数组创建流 可以使用Arrays的静态方法Arrays.stream把数组转换成流。 int[] numArr = {1,2,3,4,5}; // int数组转成IntStream流，计算总和是15 int numCount = Arrays.stream(numArr).sum(); 由文件生成流 可以使用Files的静态方法Files.lines,它会返回一个由指定文件的各行字符串流。flatMap是产生一个扁平的单词流，而不是给每一行生成一个单词流。 Stream&lt;String&gt; lines = Files.lines(Paths.get(&quot;D:/data.txt&quot;), Charset.defaultCharset()); //去除重复的数据，然后打印出来 lines.flatMap(line-&gt;Arrays.stream(line.split(&quot;,&quot;))) .distinct() .forEach(System.out::println); mapflatMapfilterreduce","tags":[{"name":"java8","slug":"java8","permalink":"https://gibck.github.io/tags/java8/"}]},{"title":"MarkDown语法总结","date":"2018-07-05T09:49:41.000Z","path":"2018/07/05/MarkDown语法总结/","text":"Hexo Markdown语法 折腾了好久终于把Hexo弄好了，真的是一波三折。具体怎么安装的请看官网上的教程 引入图片 [](http://***.img) 加粗、斜体 **加粗的字体** *斜体* 主题 # 一级主题 ## 二级主题 ### 三级主题 表格 | 表头1|表头2|表头3|表头4 | - | :- | :-: | -: | |默认左对齐|左对齐|居中对其|右对齐| |默认左对齐|左对齐|居中对其|右对齐| |默认左对齐|左对齐|居中对其|右对齐| 效果 表头 表头 表头 表头 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 代码块 ```javascript var i = 1; function fn(a){ log.info(a); } `` ` 效果 var i = 1; function fn(a){ log.info(a); }","tags":[{"name":"markedown","slug":"markedown","permalink":"https://gibck.github.io/tags/markedown/"},{"name":"hexo","slug":"hexo","permalink":"https://gibck.github.io/tags/hexo/"}]}]